name: "CI"

concurrency:
  cancel-in-progress: true
  group: ${{github.workflow}}-${{github.ref}}

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - "main"

jobs:
  lint:
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"

      - name: "Install Foundry"
        uses: "foundry-rs/foundry-toolchain@v1"

      - name: "Install Pnpm"
        uses: "pnpm/action-setup@v2"
        with:
          version: "8"

      - name: "Install Node.js"
        uses: "actions/setup-node@v3"
        with:
          cache: "pnpm"
          node-version: "lts/*"

      - name: "Install the Node.js dependencies"
        run: "pnpm install"

      - name: "Lint the contracts"
        run: "pnpm lint"

      - name: "Add lint summary"
        run: |
          echo "## Lint result" >> $GITHUB_STEP_SUMMARY
          echo "✅ Passed" >> $GITHUB_STEP_SUMMARY

  build:
      runs-on: "ubuntu-latest"
      steps:
        - name: "Check out the repo"
          uses: "actions/checkout@v3"
          with:
            submodules: "recursive"
            token: "${{ secrets.CI_TOKEN }}"

        - name: "Install Foundry"
          uses: "foundry-rs/foundry-toolchain@v1"

        - name: "Install Pnpm"
          uses: "pnpm/action-setup@v2"
          with:
            version: "8"

        - name: "Install Node.js"
          uses: "actions/setup-node@v3"
          with:
            cache: "pnpm"
            node-version: "lts/*"

        - name: "Install the Node.js dependencies"
          run: "pnpm install"

        - name: "Show the Foundry config"
          run: "forge config"

        - name: "Generate and prepare the contract artifacts"
          run: "./shell/prepare-artifacts.sh"

        - name: "Cache the build so that it can be re-used by the other jobs"
          uses: "actions/cache/save@v3"
          with:
            path: "optimized-out"
            key: "foundry-build-${{ github.sha }}"

        - name: "Store the contract artifacts in CI"
          uses: "actions/upload-artifact@v3"
          with:
            name: "contract-artifacts"
            path: "artifacts"

        - name: "Add build summary"
          run: |
            echo "## Build result" >> $GITHUB_STEP_SUMMARY
            echo "✅ Passed" >> $GITHUB_STEP_SUMMARY

  test-integration:
    needs: ["lint", "build"]
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"
        with:
          submodules: "recursive"
          token: "${{ secrets.CI_TOKEN }}"

      - name: "Install Foundry"
        uses: "foundry-rs/foundry-toolchain@v1"

      - name: "Restore the cached build"
        uses: "actions/cache/restore@v3"
        with:
          fail-on-cache-miss: true
          key: "foundry-build-${{ github.sha }}"
          path: "optimized-out"

      - name: "Run the integration tests against the optimized build"
        run: "FOUNDRY_PROFILE=test-optimized forge test --match-path \"test/integration/**/*.sol\""

      - name: "Add test summary"
        run: |
          echo "## Integration tests result" >> $GITHUB_STEP_SUMMARY
          echo "✅ Passed" >> $GITHUB_STEP_SUMMARY

  coverage:
    needs: ["lint", "build"]
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"
        with:
          submodules: "recursive"

      - name: "Install Foundry"
        uses: "foundry-rs/foundry-toolchain@v1"

      - name: "Run the integration tests and generate the coverage report"
        run: "forge coverage --match-path \"test/integration/**/*.sol\" --report lcov"

      - name: "Upload coverage report to Codecov"
        uses: "codecov/codecov-action@v3"
        with:
          files: "./lcov.info"
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: "Add coverage summary"
        run: |
          echo "## Coverage result" >> $GITHUB_STEP_SUMMARY
          echo "✅ Uploaded to Codecov" >> $GITHUB_STEP_SUMMARY
